params {
  fasta_fa = "/work_beegfs/sukmb465/projects/exome/deepvariant/genome.fa"
  fasta_fai = "/work_beegfs/sukmb465/projects/exome/deepvariant/genome.fa.fai"
  fasta_gz = "/work_beegfs/sukmb465/projects/exome/deepvariant/genome.fa.gz"
  fasta_gzfai = "/work_beegfs/sukmb465/projects/exome/deepvariant/genome.fa.gz.fai"
  fasta_gzi = "/work_beegfs/sukmb465/projects/exome/deepvariant/genome.fa.gz.gzi"

  //PARAMS
  //glnexus_config = "DeepVariantExome"
  glnexus_config = "DeepVariantWES"
	outdir = "results"

	run_name = false

	plaintext_email = false

	logo = "${baseDir}/assets/ikmblogo.png"

	email = null
  help = false


	max_memory = 128.GB
	max_cpus = 16
	max_time = 240.h
	maxMultiqcEmailFileSize = 25.MB

}

manifest {
  name = "ikmb/pipeline"
	version = "0.0"
	description = "Pipeline"
	author = "Author Name"
	homePage = "https://github.com/ikmb/XXX"
	nextflowVersion = "22.10.3"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
        overwrite = true
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_report.html"
        overwrite = true
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
        overwrite = true
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
        overwrite = true
}



profiles {
	standard {
		includeConfig 'conf/medcluster.config'
		includeConfig 'conf/base.config'
     
	}
	diagnostic {
		includeConfig 'conf/diagnostic.config'
                includeConfig 'conf/base.config'f
                includeConfig 'conf/resources.config'
	}
	test {
		includeConfig 'conf/test.config'
		includeConfig 'conf/base.config'
                includeConfig 'conf/resources.config'
        }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
//           includeConfig 'conf/resources.config'
//process.container = 'ikmb/xxx:devel'